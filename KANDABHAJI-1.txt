OS ASSIGNMENTS


steps to download python in ubuntu:


sudo apt update


sudo apt install python3


sudo apt install python3-pip


python3 --version


pip3 --version




1. Banker’s Algorithm:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as banker.py and save it in the previously created OS folder




# Banker's Algorithm in Python


def calculate_need(maximum, allocation):
    """
    Calculate the need matrix based on maximum and allocation matrices.
    """
    return [[maximum[i][j] - allocation[i][j] for j in range(len(maximum[0]))] for i in range(len(maximum))]


def is_safe_state(processes, available, maximum, allocation):
    """
    Check if the system is in a safe state and find the safe sequence.
    """
    need = calculate_need(maximum, allocation)
    n, m = len(processes), len(available)  # Number of processes and resources


    finish = [False] * n  # Tracks if a process is completed
    safe_sequence = []  # Stores the safe sequence
    work = available[:]  # Copy of available resources


    while len(safe_sequence) < n:
        found = False
        for i in range(n):
            if not finish[i]:
                # Check if resources can satisfy the need of process i
                if all(need[i][j] <= work[j] for j in range(m)):
                    # If satisfied, allocate resources and mark process as finished
                    for j in range(m):
                        work[j] += allocation[i][j]
                    safe_sequence.append(processes[i])
                    finish[i] = True
                    found = True
                    break
        if not found:
            # No process could be allocated, unsafe state
            return False, []


    return True, safe_sequence


# Input: Number of processes and resources
n = int(input("Enter number of processes: "))
m = int(input("Enter number of resource types: "))


processes = [f"P{i}" for i in range(n)]


# Input: Allocation matrix
print("\nEnter allocation matrix:")
allocation = [list(map(int, input(f"Process {i}: ").split())) for i in range(n)]


# Input: Maximum matrix
print("\nEnter maximum matrix:")
maximum = [list(map(int, input(f"Process {i}: ").split())) for i in range(n)]


# Input: Available resources
print("\nEnter available resources:")
available = list(map(int, input().split()))


# Perform safety check
is_safe, safe_sequence = is_safe_state(processes, available, maximum, allocation)


if is_safe:
    print("\nSystem is in a safe state.")
    print("Safe Sequence:", " -> ".join(safe_sequence))
else:
    print("\nSystem is not in a safe state.")






* Right Click on the OS folder created and Select Open in terminal
* python3 banker.py


Now put the following prompts:


1. For Safe State:


Enter the number of processes: 5
Enter the number of resource types: 3


Enter the Allocated Resources matrix (one row per process):
Process 0: 0 1 0
Process 1: 2 0 0
Process 2: 3 0 2
Process 3: 2 1 1
Process 4: 0 0 2


Enter the Max Resources matrix (one row per process):
Process 0: 7 5 3
Process 1: 3 2 2
Process 2: 9 0 2
Process 3: 2 2 2
Process 4: 4 3 3


Enter the Available Resources (space-separated):
3 3 2




2. For Unsafe State:


Enter the number of processes: 4
Enter the number of resource types: 2
Enter the Allocated Resources matrix (one row per process):
Process 0: 2 1
Process 1: 1 1
Process 2: 2 2
Process 3: 0 0


Enter the Max Resources matrix (one row per process):
Process 0: 3 2
Process 1: 2 2
Process 2: 3 3
Process 3: 1 1


Enter the Available Resources (space-separated):
0 1




https://chatgpt.com/share/6745f922-2294-8008-8e3f-e1ade9fd9fff


—------------------------------------------------------------------------------------------------------------------


2) Page replacement algorithm : 


1. FIFO:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as pagefifo.py and save it in the previously created OS folder


def fifo(page_sequence, frame_count):
    frames = []
    page_faults = 0


    for page in page_sequence:
        if page not in frames:
            if len(frames) < frame_count:
                frames.append(page)
            else:
                frames.pop(0)
                frames.append(page)
            page_faults += 1
        print(f"Frames: {frames}")
    print(f"Total Page Faults: {page_faults}")


pages = list(map(int, input("Enter page sequence (space-separated): ").split()))
frame_count = int(input("Enter number of frames: "))
fifo(pages, frame_count)






* Right Click on the OS folder created and Select Open in terminal
* python3 pagefifo.py
* Now put the following prompts:


Enter the reference string (space-separated): 7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1
Enter the frame size (positive integer): 3


https://chatgpt.com/share/6745fbdb-65ac-8008-a783-d64b444c1e78


—------------------------------------------------------------------------------------------------------------------


2) Page replacement algorithm : 


2. LRU:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as pagelru.py and save it in the previously created OS folder




def lru(page_sequence, frame_count):
    frames = []
    page_faults = 0


    for page in page_sequence:
        if page not in frames:
            if len(frames) < frame_count:
                frames.append(page)
            else:
                least_used = frames.pop(0)
                frames.append(page)
            page_faults += 1
        else:
            frames.remove(page)
            frames.append(page)
        print(f"Frames: {frames}")
    print(f"Total Page Faults: {page_faults}")


pages = list(map(int, input("Enter page sequence (space-separated): ").split()))
frame_count = int(input("Enter number of frames: "))
lru(pages, frame_count)




* Right Click on the OS folder created and Select Open in terminal
* python3 pagelru.py
* Now put the following prompts:


Enter the reference string (space-separated): 7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1
Enter the frame size (positive integer): 3




https://chatgpt.com/share/6745fbdb-65ac-8008-a783-d64b444c1e78




—------------------------------------------------------------------------------------------------------------------




2) Page replacement algorithm : 


3. OPT:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as pagelru.py and save it in the previously created OS folder




def optimal(page_sequence, frame_count):
    frames = []
    page_faults = 0


    for i in range(len(page_sequence)):
        page = page_sequence[i]
        if page not in frames:
            if len(frames) < frame_count:
                frames.append(page)
            else:
                future_indices = [page_sequence[i:].index(frame) if frame in page_sequence[i:] else float('inf') for frame in frames]
                farthest_index = future_indices.index(max(future_indices))
                frames[farthest_index] = page
            page_faults += 1
        print(f"Frames: {frames}")
    print(f"Total Page Faults: {page_faults}")


pages = list(map(int, input("Enter page sequence (space-separated): ").split()))
frame_count = int(input("Enter number of frames: "))
optimal(pages, frame_count)




* Right Click on the OS folder created and Select Open in terminal
* python3 opt_page_replacement.py
* Now put the following prompts:




Enter the reference string (space-separated): 7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1
Enter the frame size (positive integer): 3




https://chatgpt.com/share/6745fbdb-65ac-8008-a783-d64b444c1e78




—------------------------------------------------------------------------------------------------------------------


3) Scheduling Algorithm : 


1. FCFS:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as schedulingfcfs.py and save it in the previously created OS folder




# FCFS Scheduling Algorithm


def fcfs_scheduling(processes, burst_times):
    n = len(processes)
    wait_times = [0] * n
    turnaround_times = [0] * n


    # Calculating waiting time
    for i in range(1, n):
        wait_times[i] = wait_times[i - 1] + burst_times[i - 1]


    # Calculating turnaround time
    for i in range(n):
        turnaround_times[i] = wait_times[i] + burst_times[i]


    # Display results
    print("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time")
    for i in range(n):
        print(f"{processes[i]}\t{burst_times[i]}\t\t{wait_times[i]}\t\t{turnaround_times[i]}")
    
    print(f"\nAverage Waiting Time: {sum(wait_times)/n:.2f}")
    print(f"Average Turnaround Time: {sum(turnaround_times)/n:.2f}")




# User Input
n = int(input("Enter the number of processes: "))
processes = [f"P{i+1}" for i in range(n)]
burst_times = [int(input(f"Enter burst time for {processes[i]}: ")) for i in range(n)]


fcfs_scheduling(processes, burst_times)




* Right Click on the OS folder created and Select Open in terminal
* python3 schedulingfcfs.py
* Now put the following prompts:


Enter the number of processes: 3
Enter burst time for P1: 4
Enter burst time for P2: 3
Enter burst time for P3: 2




https://chatgpt.com/share/6745fdbb-bcc4-8008-aec9-e8168c5aedd9


—------------------------------------------------------------------------------------------------------------------


3) Scheduling Algorithm : 


2. SJT:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as schedulingsjt.py and save it in the previously created OS folder




# SJT Scheduling Algorithm


def sjt_scheduling(processes, burst_times):
    n = len(processes)
    sorted_indices = sorted(range(n), key=lambda i: burst_times[i])
    processes = [processes[i] for i in sorted_indices]
    burst_times = [burst_times[i] for i in sorted_indices]


    wait_times = [0] * n
    turnaround_times = [0] * n


    # Calculating waiting time
    for i in range(1, n):
        wait_times[i] = wait_times[i - 1] + burst_times[i - 1]


    # Calculating turnaround time
    for i in range(n):
        turnaround_times[i] = wait_times[i] + burst_times[i]


    # Display results
    print("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time")
    for i in range(n):
        print(f"{processes[i]}\t{burst_times[i]}\t\t{wait_times[i]}\t\t{turnaround_times[i]}")
    
    print(f"\nAverage Waiting Time: {sum(wait_times)/n:.2f}")
    print(f"Average Turnaround Time: {sum(turnaround_times)/n:.2f}")




# User Input
n = int(input("Enter the number of processes: "))
processes = [f"P{i+1}" for i in range(n)]
burst_times = [int(input(f"Enter burst time for {processes[i]}: ")) for i in range(n)]


sjt_scheduling(processes, burst_times)




* Right Click on the OS folder created and Select Open in terminal
* python3 schedulingsjt.py
* Now put the following prompts:


Enter the number of processes: 4
Enter burst time for P1: 8
Enter burst time for P2: 4
Enter burst time for P3: 2
Enter burst time for P4: 6




https://chatgpt.com/share/6745fdbb-bcc4-8008-aec9-e8168c5aedd9


—------------------------------------------------------------------------------------------------------------------


Scheduling Algorithm : 


3. Priority Scheduling:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as schedulingpriority.py and save it in the previously created OS folder




# SJT Scheduling Algorithm


def sjt_scheduling(processes, burst_times):
    n = len(processes)
    sorted_indices = sorted(range(n), key=lambda i: burst_times[i])
    processes = [processes[i] for i in sorted_indices]
    burst_times = [burst_times[i] for i in sorted_indices]


    wait_times = [0] * n
    turnaround_times = [0] * n


    # Calculating waiting time
    for i in range(1, n):
        wait_times[i] = wait_times[i - 1] + burst_times[i - 1]


    # Calculating turnaround time
    for i in range(n):
        turnaround_times[i] = wait_times[i] + burst_times[i]


    # Display results
    print("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time")
    for i in range(n):
        print(f"{processes[i]}\t{burst_times[i]}\t\t{wait_times[i]}\t\t{turnaround_times[i]}")
    
    print(f"\nAverage Waiting Time: {sum(wait_times)/n:.2f}")
    print(f"Average Turnaround Time: {sum(turnaround_times)/n:.2f}")




# User Input
n = int(input("Enter the number of processes: "))
processes = [f"P{i+1}" for i in range(n)]
burst_times = [int(input(f"Enter burst time for {processes[i]}: ")) for i in range(n)]


sjt_scheduling(processes, burst_times)




* Right Click on the OS folder created and Select Open in terminal
* python3 schedulingpriority.py
* Now put the following prompts:




Enter the number of processes: 3
Enter burst time for P1: 5
Enter burst time for P2: 3
Enter burst time for P3: 8
Enter priority for P1 (lower is higher priority): 2
Enter priority for P2 (lower is higher priority): 1
Enter priority for P3 (lower is higher priority): 3




https://chatgpt.com/share/6745fdbb-bcc4-8008-aec9-e8168c5aedd9


—------------------------------------------------------------------------------------------------------------------


4) Producer Consumer Problem:


1. SEMAPHORE AND THREAD:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as procon1.py and save it in the previously created OS folder




import time
import random
import threading




# Buffer and Semaphore
buffer = []
buffer_size = int(input("Enter buffer size: "))
full = threading.Semaphore(0)
empty = threading.Semaphore(buffer_size)
lock = threading.Lock()


# Stop flag to indicate when to stop the threads
stop_flag = False


# Producer Function
def producer():
    global stop_flag
    while not stop_flag:
        item = random.randint(1, 100)
        empty.acquire()
        lock.acquire()
        buffer.append(item)
        print(f"Produced: {item}, Buffer: {buffer}")
        lock.release()
        full.release()
        time.sleep(random.random())


# Consumer Function
def consumer():
    global stop_flag
    while not stop_flag:
        full.acquire()
        lock.acquire()
        item = buffer.pop(0)
        print(f"Consumed: {item}, Buffer: {buffer}")
        lock.release()
        empty.release()
        time.sleep(random.random())


# Function to stop threads after a certain time or condition
def stop_threads():
    global stop_flag
    time.sleep(10)  # Let the producer and consumer run for 10 seconds
    stop_flag = True  # Signal the threads to stop


# Creating Threads
producer_thread = threading.Thread(target=producer)
consumer_thread = threading.Thread(target=consumer)
stop_thread = threading.Thread(target=stop_threads)


# Start threads
producer_thread.start()
consumer_thread.start()
stop_thread.start()


# Wait for all threads to finish
producer_thread.join()
consumer_thread.join()
stop_thread.join()






* Right Click on the OS folder created and Select Open in terminal
* python3 procon1.py
* Now put the following prompts:


Enter buffer size: 3


https://chatgpt.com/share/67460192-a6b8-8008-a67c-1ce08ee62508


—------------------------------------------------------------------------------------------------------------------


4) Producer Consumer Problem:


2. MUTEX AND THREAD:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as procon2.py and save it in the previously created OS folder


import threading
import time
import random




# Buffer and Lock
buffer = []
buffer_size = int(input("Enter buffer size: "))
mutex = threading.Lock()


# Condition Variables
not_full = threading.Condition(mutex)
not_empty = threading.Condition(mutex)


# Stop flag to indicate when to stop the threads
stop_flag = False


# Producer Function
def producer():
    global stop_flag
    while not stop_flag:
        item = random.randint(1, 100)
        with not_full:
            while len(buffer) == buffer_size:
                not_full.wait()
            buffer.append(item)
            print(f"Produced: {item}, Buffer: {buffer}")
            not_empty.notify()
        time.sleep(random.random())


# Consumer Function
def consumer():
    global stop_flag
    while not stop_flag:
        with not_empty:
            while not buffer:
                not_empty.wait()
            item = buffer.pop(0)
            print(f"Consumed: {item}, Buffer: {buffer}")
            not_full.notify()
        time.sleep(random.random())


# Function to stop threads after a certain time (e.g., 10 seconds)
def stop_threads():
    global stop_flag
    time.sleep(10)  # Run for 10 seconds before stopping
    stop_flag = True  # Signal to stop the threads


# Creating Threads
producer_thread = threading.Thread(target=producer)
consumer_thread = threading.Thread(target=consumer)
stop_thread = threading.Thread(target=stop_threads)


# Start threads
producer_thread.start()
consumer_thread.start()
stop_thread.start()


# Wait for all threads to finish
producer_thread.join()
consumer_thread.join()
stop_thread.join()




* Right Click on the OS folder created and Select Open in terminal
* python3 procon2.py
* Now put the following prompts:


Enter buffer size: 3


https://chatgpt.com/share/67460192-a6b8-8008-a67c-1ce08ee62508


—------------------------------------------------------------------------------------------------------------------


5) Reader Writer Problem:


1. Mutex and Thread:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as readwrite1.py and save it in the previously created OS folder




import threading
import time




# Shared variables
data = 0
read_count = 0
mutex = threading.Lock()
write_lock = threading.Lock()


# Stop flag to indicate when to stop the threads
stop_flag = False




def reader(reader_id):
    global read_count
    while not stop_flag:
        with mutex:
            read_count += 1
            if read_count == 1:
                write_lock.acquire()
        # Reading data
        print(f"Reader {reader_id} is reading data: {data}")
        time.sleep(1)  # Simulate reading
        with mutex:
            read_count -= 1
            if read_count == 0:
                write_lock.release()
        time.sleep(1)




def writer(writer_id):
    global data
    while not stop_flag:
        write_lock.acquire()
        # Writing data
        data += 1
        print(f"Writer {writer_id} updated data to: {data}")
        time.sleep(1)  # Simulate writing
        write_lock.release()
        time.sleep(1)




# Function to stop threads after a certain time (e.g., 10 seconds)
def stop_threads():
    global stop_flag
    time.sleep(10)  # Run for 10 seconds before stopping
    stop_flag = True  # Signal to stop the threads




# User input
num_readers = int(input("Enter number of readers: "))
num_writers = int(input("Enter number of writers: "))




threads = []


# Start reader threads
for i in range(num_readers):
    t = threading.Thread(target=reader, args=(i + 1,))
    threads.append(t)
    t.start()


# Start writer threads
for i in range(num_writers):
    t = threading.Thread(target=writer, args=(i + 1,))
    threads.append(t)
    t.start()


# Start the stop thread to terminate threads after some time
stop_thread = threading.Thread(target=stop_threads)
stop_thread.start()


# Wait for all threads to finish
for t in threads:
    t.join()


# Wait for the stop thread to finish
stop_thread.join()


print("Program terminated gracefully.")






* Right Click on the OS folder created and Select Open in terminal
* python3 readwrite1.py
* Now put the following prompts:


Enter number of readers: 2
Enter number of writers: 3




https://chatgpt.com/share/674603dc-85a4-8008-a370-4bbe984c049f




—------------------------------------------------------------------------------------------------------------------




5) Reader Writer Problem:


2. USING SEMAPHORE AND THREAD:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as readwrite2.py and save it in the previously created OS folder


import threading
import time




# Shared variables
data = 0
read_count = 0
read_count_lock = threading.Semaphore(1)
write_lock = threading.Semaphore(1)


# Stop flag to indicate when to stop the threads
stop_flag = False




def reader(reader_id):
    global read_count
    while not stop_flag:
        read_count_lock.acquire()
        read_count += 1
        if read_count == 1:
            write_lock.acquire()
        read_count_lock.release()
        
        # Reading data
        print(f"Reader {reader_id} is reading data: {data}")
        time.sleep(1)  # Simulate reading


        read_count_lock.acquire()
        read_count -= 1
        if read_count == 0:
            write_lock.release()
        read_count_lock.release()
        time.sleep(1)




def writer(writer_id):
    global data
    while not stop_flag:
        write_lock.acquire()
        # Writing data
        data += 1
        print(f"Writer {writer_id} updated data to: {data}")
        time.sleep(1)  # Simulate writing
        write_lock.release()
        time.sleep(1)




# Function to stop threads after a certain time (e.g., 10 seconds)
def stop_threads():
    global stop_flag
    time.sleep(10)  # Run for 10 seconds before stopping
    stop_flag = True  # Signal to stop the threads




# User input
num_readers = int(input("Enter number of readers: "))
num_writers = int(input("Enter number of writers: "))




threads = []


# Start reader threads
for i in range(num_readers):
    t = threading.Thread(target=reader, args=(i + 1,))
    threads.append(t)
    t.start()


# Start writer threads
for i in range(num_writers):
    t = threading.Thread(target=writer, args=(i + 1,))
    threads.append(t)
    t.start()


# Start the stop thread to terminate threads after some time
stop_thread = threading.Thread(target=stop_threads)
stop_thread.start()


# Wait for all threads to finish
for t in threads:
    t.join()


# Wait for the stop thread to finish
stop_thread.join()




* Right Click on the OS folder created and Select Open in terminal
* python3 readwrite2.py
* Now put the following prompts:


Enter number of readers: 2
Enter number of writers: 3




https://chatgpt.com/share/674603dc-85a4-8008-a370-4bbe984c049f




—------------------------------------------------------------------------------------------------------------------


6) Problems on AWK Script:


1. To make a report:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below details and give file name as students_records.txt and save it in the previously created OS folder


Aryan 60 65 55
Shriyog 75 80 85
Saee 35 40 45
Naresh 58 62 68
Bakul 70 85 25
Rushi 55 70 55
Shivraj 36 74 38
Parvez 59 63 98
* Now Navigate to Text Editor and paste the below details and give file name as student.awk and save it in the previously created OS folder




BEGIN {
    print "Roll No\tName\tTotal Marks\tPercentage\tResult"
    print "-----------------------------------------------------------"
}
{
    # Calculate total marks
    total = $3 + $4 + $5
    
    # Calculate percentage
    percentage = total / 3


    # Determine the result
    if (percentage < 40)
        result = "Fail"
    else if (percentage >= 60 && percentage <= 65)
        result = "First Class"
    else if (percentage > 66)
        result = "Distinction"
    else
        result = "Pass"


    # Print the record
    printf "%s\t%s\t%d\t\t%.2f\t\t%s\n", $1, $2, total, percentage, result
}




* Right Click on the OS folder created and Select Open in terminal
* awk -f student.awk students_records.txt




https://chatgpt.com/share/67460a19-b4ec-8008-8cb8-32a3ce1ef329






( Just Incase )


Addition:
echo ‘10 20’ | awk ‘{print $1 + $2}’


https://chatgpt.com/share/674774e6-9ce8-800d-a0f7-1559c25290d5


—------------------------------------------------------------------------------------------------------------------




7) Shell program:


1. Palindrome:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below details and give file name as palindrome.sh and save it in the previously created OS folder




#!/bin/bash


read -p "Enter a string: " str
# Convert the input string to lowercase
lower_str=$(echo "$str" | tr '[:upper:]' '[:lower:]')
# Reverse the string
reverse=$(echo "$lower_str" | rev)


if [ "$lower_str" == "$reverse" ]; then
    echo "The string '$str' is a palindrome."
else
    echo "The string '$str' is not a palindrome."
fi




* Right Click on the OS folder created and Select Open in terminal
* bash palindrome.sh


Enter string: Madam
The string is palindrome




https://chatgpt.com/share/6747671f-d688-800d-a332-74fa8f6770d0


—------------------------------------------------------------------------------------------------------------------


7) Shell program:


2. Perform arithmetic operations:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below details and give file name as arithmetic_operations.sh and save it in the previously created OS folder




#!/bin/bash


# Function to perform arithmetic operations
perform_operation() {
    case $choice in
    1)
        result=$((num1 + num2))
        echo "Sum: $result"
        ;;
    2)
        result=$((num1 - num2))
        echo "Difference: $result"
        ;;
    3)
        result=$((num1 * num2))
        echo "Product: $result"
        ;;
   
    4)
        echo "Decimal Division (using bc):"
        echo "scale=2; $num1 / $num2" | bc
        ;;
    *)
        echo "Invalid choice! Please select a valid option."
        ;;
    esac
}


while true; do


  echo
    echo "Select an arithmetic operation:"
    echo "1. Addition"
    echo "2. Subtraction"
    echo "3. Multiplication"
    echo "4. Division (decimal)"
    echo "5. Exit"
    echo "Enter your choice: "
    read choice
    
    if [ $choice -eq 5 ]; then
        echo "Exiting the program. Goodbye!"
        break
    fi
    
    echo "Enter the first number: "
    read num1
    echo "Enter the second number: "
    read num2




    perform_operation
    echo
done




* Right Click on the OS folder created and Select Open in terminal
* bash arithmetic_operations.sh




https://chatgpt.com/share/6747671f-d688-800d-a332-74fa8f6770d0




—------------------------------------------------------------------------------------------------------------------


7) Shell program:


3. Count the Occurances:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below details and give file name as co.sh and save it in the previously created OS folder


#!/bin/bash


read -p "Enter the text: " text
read -p "Enter the word/character to count: " search


count=$(echo "$text" | grep -o "$search" | wc -l)


echo "The word/character '$search' appears $count times in the given text."




* Right Click on the OS folder created and Select Open in terminal
* bash co.sh




https://chatgpt.com/share/6747671f-d688-800d-a332-74fa8f6770d0


—------------------------------------------------------------------------------------------------------------------


7) Shell program:


4. Insertion Sort:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below details and give file name as insertion_sort.sh and save it in the previously created OS folder




#!/bin/bash


read -p "Enter numbers separated by space: " -a arr


# Perform insertion sort
for ((i = 1; i < ${#arr[@]}; i++)); do
    key=${arr[i]}
    j=$((i - 1))


    while ((j >= 0 && arr[j] > key)); do
        arr[j+1]=${arr[j]}
        j=$((j - 1))
    done
    arr[j+1]=$key
done


echo "Sorted array: ${arr[@]}"




* Right Click on the OS folder created and Select Open in terminal
* bash insertion_sort.sh


Enter numbers separated by space: 1 4 5 3 2
Sorted Array: 1 2 3 4 5


https://chatgpt.com/share/6747671f-d688-800d-a332-74fa8f6770d0


—------------------------------------------------------------------------------------------------------------------
8) Substring program(sh):


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below details and give file name as subtring.sh and save it in the previously created OS folder


#!/bin/bash


# Get user input
read -p "Enter a string: " user_string
read -p "Enter the substring to check: " sub_string


# Check if the substring exists
if [[ $user_string == *$sub_string* ]]; then
    echo "Substring found!"
else
    echo "Substring not found!"
fi


* Right Click on the OS folder created and Select Open in terminal
* bash substring.sh




Enter a string: Shriyog
Enter the substring to check: yog
Substring found!






—------------------------------------------------------------------------------------------------------------------


8) Substring program(python):


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as substring.py and save it in the previously created OS folder






def substring_check():
    # Step 1: Start
    print("Substring Checker")


    # Step 2: Accept the two strings
    string1 = input("Enter the main string: ")
    string2 = input("Enter the substring to search for: ")


    # Step 3 to 6: Compare character by character
    positions = []
    len1, len2 = len(string1), len(string2)


    for i in range(len1 - len2 + 1):
        match_found = True
        for j in range(len2):
            if string1[i + j] != string2[j]:
                match_found = False
                break
        if match_found:
            positions.append(i)


    # Step 7: Display the result
    if positions:
        print(f"Substring exists at positions: {positions}")
    else:
        print("Substring does not exist")


    # Step 8: Stop


# Call the function
substring_check()




* Right Click on the OS folder created and Select Open in terminal
* python3 substring.py


Substring Checker
Enter the main string: Shriyog
Enter the substring to search for: yog
Substring exists at positions: [4]


https://chatgpt.com/share/6746e3d7-ecdc-800d-914a-63d904983faa




—------------------------------------------------------------------------------------------------------------------


8) Bubble Sort program:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as bubble.py and save it in the previously created OS folder




# Bubble Sort in Python with user input


# Step 1: Accept how many numbers to be sorted
n = int(input("Enter the number of elements to sort: "))


# Step 2: Accept the numbers in an array
num = []
print(f"Enter {n} numbers:")
for i in range(n):
    num.append(int(input(f"Enter element {i+1}: ")))


# Step 3: Initialize i to 0 (no need for j to be initialized as 0 outside the loop)
# Step 4: Bubble Sort Process
for i in range(n):
    for j in range(0, n-i-1):  # Decrease the range with each pass
        if num[j] > num[j+1]:
            # Step 5: Swap elements if they are in the wrong order
            num[j], num[j+1] = num[j+1], num[j]


# Step 6: Display the sorted list
print("Sorted list:", num)




* Right Click on the OS folder created and Select Open in terminal
* python3 bubble.py




Enter the number of elements to sort: 5
Enter 5 numbers:
Enter element 1: 69
Enter element 2: 143
Enter element 3: 420
Enter element 4: 100
Enter element 5: -11
Sorted list: [-11, 69, 100, 143, 420]




https://chatgpt.com/share/6746e56b-7490-800d-a67c-ca6e4cdf1080


—------------------------------------------------------------------------------------------------------------------


8) Dining Philosopher problem:


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as dining.py and save it in the previously created OS folder




import threading
import time
import random


# Constants
NUM_PHILOSOPHERS = 5
MAX_EATING_TIME = 3  # Time in seconds


# Semaphores
semaphores = [threading.Semaphore(1) for _ in range(NUM_PHILOSOPHERS)]
states = ['thinking' for _ in range(NUM_PHILOSOPHERS)]  # Initial states of philosophers


# Mutex for printing
print_lock = threading.Lock()


# Function to simulate philosopher's actions
def philosopher(id):
    while True:
        # Philosopher is thinking
        time.sleep(random.uniform(1, 3))  # Thinking time
        print(f"Philosopher {id} is thinking.")


        # Philosopher is hungry and wants to eat
        states[id] = 'hungry'
        print(f"Philosopher {id} is hungry.")


        # Try to eat
        try_to_eat(id)


        # Eating
        eating_time = random.uniform(1, MAX_EATING_TIME)
        print(f"Philosopher {id} is eating for {eating_time:.2f} seconds.")
        time.sleep(eating_time)


        # Finish eating and return to thinking
        states[id] = 'thinking'
        print(f"Philosopher {id} is done eating.")


def try_to_eat(id):
    left = (id - 1) % NUM_PHILOSOPHERS
    right = (id + 1) % NUM_PHILOSOPHERS


    # Check if both left and right philosophers are eating
    while states[left] == 'eating' or states[right] == 'eating':
        time.sleep(0.1)  # Wait if left or right are eating


    # Both left and right philosophers are not eating, philosopher can eat
    if states[id] == 'hungry':
        print(f"Philosopher {id} can now eat.")
        states[id] = 'eating'


        # Acquire semaphores for left and right forks (resources)
        semaphores[left].acquire()
        semaphores[right].acquire()


        print(f"Philosopher {id} is eating...")


        # Release semaphores after eating
        semaphores[left].release()
        semaphores[right].release()


# Create threads for each philosopher
threads = []
for i in range(NUM_PHILOSOPHERS):
    thread = threading.Thread(target=philosopher, args=(i,))
    threads.append(thread)
    thread.start()


# Wait for all threads to finish (this is optional as the philosophers will run indefinitely)
for thread in threads:
    thread.join()




* Right Click on the OS folder created and Select Open in terminal
* python3 dining.py




https://chatgpt.com/share/6746e78a-7cf0-800d-b58e-cfb7e6246209




—------------------------------------------------------------------------------------------------------------------


9) Round Robin Algorithm (CPU Scheduling):


* Open Files and in Documents create a Folder Named OS 
* Now Navigate to Text Editor and paste the below code and give file name as round_robin.py and save it in the previously created OS folder






# Round Robin Scheduling in Python


def calculate_turnaround_time(arrival_time, finish_time):
    return finish_time - arrival_time


def calculate_waiting_time(turnaround_time, burst_time):
    return turnaround_time - burst_time


def round_robin():
    num_processes = int(input("Enter number of processes: "))
    arrival_times = []
    burst_times = []
    processes = list(range(1, num_processes + 1))


    for i in range(num_processes):
        arrival_time = int(input(f"Enter arrival time for process {i + 1}: "))
        burst_time = int(input(f"Enter burst time for process {i + 1}: "))
        arrival_times.append(arrival_time)
        burst_times.append(burst_time)


    time_quantum = int(input("Enter time quantum: "))
    
    remaining_burst_times = burst_times.copy()  # to track remaining burst time for each process
    current_time = 0
    finished_processes = 0
    finish_times = [-1] * num_processes
    gantt_chart = []
    waiting_times = [0] * num_processes
    turnaround_times = [0] * num_processes


    while finished_processes < num_processes:
        for i in range(num_processes):
            if arrival_times[i] <= current_time and remaining_burst_times[i] > 0:
                gantt_chart.append(f"P{i+1}")
                if remaining_burst_times[i] > time_quantum:
                    current_time += time_quantum
                    remaining_burst_times[i] -= time_quantum
                else:
                    current_time += remaining_burst_times[i]
                    remaining_burst_times[i] = 0
                    finish_times[i] = current_time
                    finished_processes += 1
                    turnaround_times[i] = calculate_turnaround_time(arrival_times[i], finish_times[i])
                    waiting_times[i] = calculate_waiting_time(turnaround_times[i], burst_times[i])


    # Display results
    print("\nProcess\tArrival Time\tBurst Time\tFinish Time\tTurnaround Time\tWaiting Time")
    for i in range(num_processes):
        print(f"P{i + 1}\t{arrival_times[i]}\t\t{burst_times[i]}\t\t{finish_times[i]}\t\t{turnaround_times[i]}\t\t{waiting_times[i]}")


    print("\nGantt Chart: ", " -> ".join(gantt_chart))


if __name__ == "__main__":
    round_robin()




* Right Click on the OS folder created and Select Open in terminal
* python3 round_robin.py
* Now put the following prompts:




Enter number of processes: 3
Enter arrival time for process 1: 0
Enter burst time for process 1: 4
Enter arrival time for process 2: 1
Enter burst time for process 2: 3
Enter arrival time for process 3: 2
Enter burst time for process 3: 2
Enter time quantum: 2




https://chatgpt.com/share/6746e95d-b534-800d-8d5c-d2f8f0b86b75


—------------------------------------------------------------------------------------------------------------------
Oh, by the way. You're all f**king welcome.


~ Coded by Aryan & Shriyog